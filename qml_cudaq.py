# -*- coding: utf-8 -*-
"""QML_CUDAQ.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BaQt15Ly-Wbt__oGRAgA2BzfuRuZL8q_
"""

!pip install cuda-quantum

!pip install qutip

import sys
import cudaq

print(f"Running on target {cudaq.get_target().name}")
qubit_count = 2

@cudaq.kernel
def kernel():
    qubits = cudaq.qvector(qubit_count)
    h(qubits[0])
    for i in range(1, qubit_count):
        x.ctrl(qubits[0], qubits[i])
    mz(qubits)

result = cudaq.sample(kernel)
print(result)  # Example: { 11:500 00:500 }

@cudaq.kernel
def kernel2():
    # A single qubit initialized to the ground / zero state.
    qubit = cudaq.qubit()

    # Apply the Pauli x gate to the qubit.
    x(qubit)

    # Measurement operator.
    mz(qubit)


# Sample the qubit for 1000 shots to gather statistics.
result = cudaq.sample(kernel2)
print(result.most_probable())

@cudaq.kernel
def kernel3():
    # A single qubit initialized to the ground/ zero state.
    qubit = cudaq.qubit()

    # Apply Hadamard gate to single qubit to put it in equal superposition.
    h(qubit)

    # Measurement operator.
    mz(qubit)


result = cudaq.sample(kernel3)
print("Measured |0> with probability " +
      str(result["0"] / sum(result.values())))
print("Measured |1> with probability " +
      str(result["1"] / sum(result.values())))

import sys

try:
    import matplotlib.pyplot as plt
    import qutip

except ImportError:
    print("Tools not found, installing. Please restart your kernel after this is done.")
    !{sys.executable} -m pip install qutip\>=5 matplotlib\>=3.5
    print("\nNew libraries have been installed. Please restart your kernel!")

import cudaq
import numpy as np
import qutip
from qutip import Bloch
## Retry the subsequent cells by setting the target to density matrix simulator.
# cudaq.set_target("density-matrix-cpu")


@cudaq.kernel
def kernel(angles: np.ndarray):
    qubit = cudaq.qubit()
    rz(angles[0], qubit)
    rx(angles[1], qubit)
    rz(angles[2], qubit)

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib nbagg
# %matplotlib notebook



rng = np.random.default_rng(seed=11)
blochSphereList = []
for _ in range(4):
    angleList = rng.random(3) * 2 * np.pi
    sph = cudaq.add_to_bloch_sphere(cudaq.get_state(kernel, angleList))
    blochSphereList.append(sph)

cudaq.show(blochSphereList[0])

import cudaq
qubit_count = 5
# We can set a larger `qubit_count` if running on a GPU backend.
# qubit_count = 28

@cudaq.kernel
def kernel(qubit_count: int):
    qvector = cudaq.qvector(qubit_count)
    h(qvector)
    for qubit in range(qubit_count - 1):
        x.ctrl(qvector[qubit], qvector[qubit + 1])
    mz(qvector)

result = cudaq.sample(kernel, qubit_count, shots_count=100)

if (not cudaq.mpi.is_initialized()) or (cudaq.mpi.rank() == 0):
    print(result)





