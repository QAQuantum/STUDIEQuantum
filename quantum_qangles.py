# -*- coding: utf-8 -*-
"""Quantum_QAngles.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kGxEtlIHXjFS3NxYDLFQ3jhcQGDGQRo_
"""

# from google.colab import drive
# drive.mount('/content/drive')

# - TERRAFORM QUANTUM COMPUTE
# --------   https://cloud.ibm.com/docs/quantum-computing?topic=quantum-computing-setup-terraform&interface=api
# https://cloud.ibm.com/docs/quantum-computing?topic=quantum-computing-plans
# https://docs.quantum.ibm.com/guides/introduction-to-qasm
# https://www.ibm.com/quantum/qiskit
# https://docs.quantum.ibm.com/api/qiskit/quantum_info
# https://github.com/Qiskit/qiskit

!pip install pytket
# pytket from quantinuum offering

!pip uninstall qiskit qiskit-aer  qiskit-braket-provider  qiskit-ibm-runtime  qiskit-ionq qiskit-terra -y

!pip list

!pip install qiskit==1.1.1  --no-cache-dir

####!pip install openai
!pip install numpy
!pip install pandas

!pip list

!pip install setuptools==69.5.1

!pip list

!pip install qiskit_ibm_runtime

!pip install ibm-platform-services==0.55.2
#ibm-cloud-sdk-core-3.20.4 ibm-platform-services-0.55.2 urllib3-2.2.

#!pip install qiskit_ibm_runtime --no-cache-dir
#qiskit-1.1.1 qiskit_ibm_runtime-0.25.0

!pip uninstall qiskit_braket_provider -y

!pip install pylatexenc

!pip install ipykernel

!pip install qiskit_aer

!pip list

#!pip install qiskit-terra --no-cache-dir

import qiskit
from qiskit_ibm_runtime import QiskitRuntimeService
from qiskit import QuantumCircuit, QuantumRegister, quantum_info
from qiskit.visualization import plot_histogram, plot_distribution, plot_gate_map
###from qiskit_braket_provider import AWSBraketBackend
from qiskit import qasm3
from qiskit_aer.primitives import Estimator

mlAnglesIBMService = QiskitRuntimeService(channel="ibm_quantum", token="71b8d06738c8bf98495b52ba6888c6c654ffa481c806fc52104d8e80a6743bbd1363c74398fd924401ebb588c52a01b0fd8a292df0df11104c97d07b5d4236be")

mlAnglesIBMService.instances()

# IN THE CURRENT QUANTUM KIT ONLY FOR REGIONS ARE AVAILABLE
# [<IBMBackend('ibm_brisbane')>,
#  <IBMBackend('ibm_kyoto')>,
#  <IBMBackend('ibm_osaka')>,
#  <IBMBackend('ibm_sherbrooke')>] #QAAS
mlangelsBackend =   mlAnglesIBMService.backend(name='ibm_sherbrooke')
mlangelsBackend

mlangelsBackend.status()

mlangelsBackend.num_qubits

mlangelsBackend.coupling_map

mlangelsBackend.dt

mlangelsBackend.options

mlangelsAllQPU =   mlAnglesIBMService.backends()
mlangelsAllQPU

activeAccountDetails = mlAnglesIBMService.active_account()
activeAccountDetails

mlAngleIBMInstanceName = mlAnglesIBMService.instances()
mlAngleIBMInstanceName

mlAnglesIBMService.jobs()[0].inputs
#creation_date

mlAnglesIBMService.jobs()[0].metrics()

mlAnglesIBMService.jobs()[0]

mlAnglesIBMService.jobs()[0].job_id()

mlAnglesIBMService.jobs()[0].primitive_id

"""# QAngles - Quantinuum with INQUANTO and PyTket , running on IBM IVIY, Nexus"""

from pytket import Circuit

c = Circuit(2, 2) # define a circuit with 2 qubits and 2 bits
c.H(0)            # add a Hadamard gate to qubit 0
c.Rz(0.25, 0)     # add an Rz gate of angle 0.25*pi to qubit 0
c.CX(1,0)         # add a CX gate with control qubit 1 and target qubit 0
c.measure_all()   # measure qubits 0 and 1, recording the results in bits 0 and 1

from pytket import Circuit
from pytket.circuit.display import render_circuit_jupyter as draw

circ1 = Circuit()
j = circ1.add_q_register("j", 1)
circ1.Y(j[0])

circ2 = Circuit()
k = circ2.add_q_register("k", 2)
circ2.X(k[1])
circ2.CRz(0.64, k[1], k[0])

circ3 = circ1 * circ2 # Take the tensor product

draw(circ3)

from pytket import Circuit
from pytket.circuit.display import render_circuit_jupyter as draw

circ = Circuit(3)
circ.CX(0, 1).CZ(1, 2).X(1).Rx(0.3, 0)
draw(circ) # Render interactive circuit diagram

from pytket.circuit import Circuit

# Set up circuit registers
qpe_circ = Circuit(name="QPE")
a = qpe_circ.add_q_register("a", 2)
s = qpe_circ.add_q_register("s", 1)
c = qpe_circ.add_c_register("c", 2)

# Initial superposition
qpe_circ.H(a[0])
qpe_circ.H(a[1])

# Sequence of controlled unitaries
qpe_circ.CU1(0.94, a[1], s[0])
qpe_circ.CU1(0.94, a[0], s[0])
qpe_circ.CU1(0.94, a[0], s[0])

# 2-qubit QFT (simplified)
qpe_circ.H(a[0])
qpe_circ.CU1(0.5, a[1], a[0])
qpe_circ.H(a[1])
qpe_circ.SWAP(a[0], a[1])

# Measure qubits writing to the classical register
qpe_circ.measure_register(a, "c")

draw(qpe_circ)





